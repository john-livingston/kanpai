#!/usr/bin/env python

import os
import sys
import argparse
import multiprocessing

import yaml
import numpy as np
import pandas as pd
import matplotlib
matplotlib.use('Agg')

import kanpai


cwd = os.path.abspath('.')

# General options
parser = argparse.ArgumentParser(description="Fit individual mid-transit times")
parser.add_argument('--input', help='Input directory (created by kanpai-fitk2)', type=str, default=cwd)
parser.add_argument('--setup', help='Path to YAML setup file', type=str, default=None)
parser.add_argument('--epic', help='EPIC ID', type=str, default=None)
parser.add_argument('--period', help='Period', type=float, default=None)
parser.add_argument('--t0', help='T0', type=float, default=None)
parser.add_argument('--t14', help='T14', type=float, default=None)
parser.add_argument('-w', '--width', help='Extraction width [days]',
    type=float, default=0.8)
parser.add_argument('-c', '--clip', help='sigma clip (upper, lower)',
    type=str, default='4,10')
parser.add_argument('--phot', help='Path to photometric time series '
    'file to use (instead of EVEREST)', type=str, default=None)
parser.add_argument('--sc', help='K2 short cadence data',
    dest='short_cadence', action='store_true')
parser.add_argument('--skip', help='individual K2 epochs to skip'
    ', comma-separated', type=str, default=None)
parser.add_argument('--mcmc', help='use MCMC', dest='mcmc', action='store_true')
parser.add_argument('--gr', type=float, default=1.1,
    help='Gelmin-Rubin threshold')
parser.add_argument('--map_init', help='Initialize MCMC with MAP fit',
    dest='map_init', action='store_true')
parser.add_argument('--restart', dest='restart', help='restart MCMC',
    action='store_true')

parser.set_defaults(short_cadence=False, map_init=False, restart=False)

args = parser.parse_args()

if args.setup is None:
    assert args.epic and args.period and args.t0 and args.t14
    epic = args.epic
    p = args.period
    t0 = args.t0
    t14 = args.t14
else:
    setup = yaml.load(open(args.setup))
    epic = setup['config']['starid']
    p = setup['transit']['p']
    t0 = setup['transit']['t0']
    t14 = setup['transit']['t14']

width = args.width
input_dir = args.input

fp = os.path.join(input_dir, 'ephem-input.yaml')
yaml.dump(vars(args), open(fp, 'w'), default_flow_style=False)

if args.skip is not None:
    skip = [int(i) for i in args.skip.split(',')]
else:
    skip = args.skip

su, sl = [float(i) for i in args.clip.split(',')]

fp = os.path.join(input_dir, 'mcmc-summary.yaml')
res = yaml.load(open(fp))
k, a, b, q1, q2 = [res['pv_best'].get(pv) for pv in 'k a b q1 q2'.split()]
i = kanpai.util.transit.inclination(a, b)
u1, u2 = kanpai.util.ld.q_to_u(q1, q2)

if args.phot is None:
    t, f = kanpai.k2.lc.unfolded(epic, p, t0, t14)
else:
    t, f = np.loadtxt(args.phot, unpack=True)
    if t.max() < 2454833:
        t += 2454833

# initial sigma clip
idx = kanpai.util.stats.outliers(f, su=su, sl=sl)
t, f = t[~idx], f[~idx]

# get transit segments
tns = kanpai.util.lc.get_tns(t, p, t0)
fp = os.path.join(input_dir, 'ephem-lc.png')
kanpai.plot.simple_ts(t, f, fp=fp, vticks=tns, color='b', alpha=0.3, mew=1, mec='k', ms=3)
orb, ts, fs = kanpai.util.lc.fold(t, f, p, t0, t14, width=width, bl=True, skip=skip, ret_seg=True)

# individual sigma clip
for n, (o, t, f) in enumerate(zip(orb, ts, fs)):
    try:
        idx = kanpai.util.stats.outliers(f, su=su, sl=sl)
        ts[n], fs[n] = np.array(t)[~idx], np.array(f)[~idx]
        print "Sigma-clip for orbit {}: {} outliers identified for +{}/-{} sigma".format(o, idx.sum(), su, sl)
    except:
        print "Sigma-clip error at orbit {}: {} outliers identified for +{}/-{} sigma".format(o, idx.sum(), su, sl)

# sanitize
for o, t, f in zip(orb, ts, fs):
    if len(t) == 0 or len(f) == 0:
        idx = orb.index(o)
        orb.pop(idx)
        ts.pop(idx)
        fs.pop(idx)
        print "Removed bad transit at orbit {}".format(o)
        print "No data in window."
    elif len(t) != len(f):
        idx = orb.index(o)
        orb.pop(idx)
        ts.pop(idx)
        fs.pop(idx)
        print "Removed bad transit at orbit {}".format(o)
        print "Dimension mis-match: {} vs. {}".format(len(t), len(f))

out = {}
if not args.mcmc:

    tc_best = []
    for o, t, f in zip(orb, ts, fs):
        print "\nAttempting fit for orbit {}".format(o),
        fit = kanpai.k2.fit.FitK2Tc(t, f, k, a, i, u1, u2, p, sc=args.short_cadence)
        fit.run_map(make_plots=False)
        fp = os.path.join(input_dir, 'ephem-map-tc{}.png'.format(o))
        fit.plot_best(nmodel=500, fp=fp)
        tc_best.append(fit.best['tc'])
    out['tc_best'] = tc_best

else:

    fp = os.path.join(input_dir, 'ephem-mcmc.npz')
    if not os.path.isfile(fp) or args.restart:

        tc_best = []
        tc_perc = []
        tc_samples = []
        for o, t, f in zip(orb, ts, fs):
            fit = kanpai.k2.fit.FitK2Tc(t, f, k, a, i, u1, u2, p, sc=args.short_cadence)
            if args.map_init:
                fit.run_map(make_plots=False)
            fit.run_mcmc(make_plots=False, save=False, gr_threshold=args.gr)
            fp = os.path.join(input_dir, 'ephem-samples-tc{}.png'.format(o))
            fit.plot_samples(nmodel=500, fp=fp)
            summary = fit.summarize_mcmc(save=False)
            tc_best.append(summary['pv_best']['tc'])
            tc_perc.append(summary['percentiles']['tc'])
            tc_samples.append(fit._fc[:,fit._pv_names.index('tc')])
        out['tc_best'] = tc_best
        out['tc_perc'] = tc_perc

        # make tc sample sets same size:
        ns = [len(tcs) for tcs in tc_samples]
        ns_min = min(ns)
        for n,tcs in enumerate(tc_samples):
            tc_samples[n] = tcs[-ns_min:]

        fp = os.path.join(input_dir, 'ephem-mcmc.npz')
        np.savez_compressed(fp, orb=orb, tc_best=tc_best, tc_perc=tc_perc, tc_samples=tc_samples)

    else:

        npz = np.load(fp)
        orb = npz['orb']
        tc_best = npz['tc_best']
        tc_perc = npz['tc_perc']
        tc_samples = npz['tc_samples']

        if skip is not None:
            idx = np.array([orb.index(i) if i in skip for i in skip])
            orb = orb[~idx]
            tc_best = tc_best[~idx]
            tc_perc = tc_perc[~idx]
            tc_samples = tc_samples[~idx]

        out['tc_best'] = tc_best
        out['tc_perc'] = tc_perc

for o,tc in zip(orb, tc_best):
    print "Tc,{} = {}".format(o, tc)

t0, p = kanpai.util.stats.simple_ols(orb, tc_best)
print "Max. Prob. P = {}, T0 = {}".format(p, t0)

if not args.mcmc:
    fp = os.path.join(input_dir, 'ephem-oc.png')
    kanpai.plot.oc(orb, tc_best, p, t0, fp=fp)
    out['p'] = float(p)
    out['t0'] = float(t0)
else:
    out['p_best'] = float(p)
    out['t0_best'] = float(t0)
    ephem_samples = kanpai.util.transit.sample_ephem(orb, tc_samples)
    fp = os.path.join(input_dir, 'ephem-corner.png')
    kanpai.plot.corner(ephem_samples, labels=r'$T_0$ $P$'.split(), truths=[t0,p], fp=fp)
    perc = np.percentile(ephem_samples, [15.87,50.0,84.13], axis=0)
    (t0, t0_err), (p, p_err) = map(lambda x: (x[1], (x[1]-x[0], x[2]-x[1])), perc.T)
    tc_err = map(lambda x: (x[1]-x[0], x[2]-x[1]), tc_perc)
    tc_err = np.array(tc_err).T
    fp = os.path.join(input_dir, 'ephem-oc.png')
    kanpai.plot.oc(orb, tc_best, p, t0, tc_err=tc_err, p_err=p_err, fp=fp)
    out['p_med'] = float(p)
    out['t0_med'] = float(t0)
    out['p_err'] = [float(i) for i in p_err]
    out['t0_err'] = [float(i) for i in t0_err]

fp = os.path.join(input_dir, 'ephem-summary.yaml')
yaml.dump(out, open(fp, 'w'), default_flow_style=False)
