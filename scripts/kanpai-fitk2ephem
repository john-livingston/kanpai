#!/usr/bin/env python

import os
import sys
import glob
import argparse
import multiprocessing

import yaml
import numpy as np
import pandas as pd
import matplotlib
matplotlib.use('Agg')

import kanpai


cwd = os.path.abspath('.')

# General options
parser = argparse.ArgumentParser(description="Fit individual mid-transit times")
parser.add_argument('epic', help='EPIC ID', type=str, default=None)
parser.add_argument('period', help='Period', type=float, default=None)
parser.add_argument('t0', help='T0', type=float, default=None)
parser.add_argument('t14', help='T14', type=float, default=None)
parser.add_argument('--input', help='Input directory (created by kanpai-fitk2)', type=str, default=cwd)
parser.add_argument('--skip', help='individual K2 epochs to skip'
    ', comma-separated', type=str, default=None)
parser.add_argument('--mcmc', help='use MCMC', dest='mcmc', action='store_true')
parser.add_argument('--gr', type=float, default=1.1,
    help='Gelmin-Rubin threshold')

args = parser.parse_args()

epic = args.epic
p = args.period
t0 = args.t0
t14 = args.t14
input_dir = args.input

if args.skip is not None:
    skip = [int(i) for i in args.skip.split(',')]
else:
    skip = args.skip

fp = os.path.join(input_dir, 'mcmc-summary.yaml')
res = yaml.load(open(fp))
k, a, b, q1, q2 = [res['pv_best'].get(pv) for pv in 'k a b q1 q2'.split()]
i = kanpai.util.transit.inclination(a, b)
u1, u2 = kanpai.util.ld.q_to_u(q1, q2)

t, f = kanpai.k2.lc.unfolded(epic, p, t0, t14)
fp = os.path.join(input_dir, 'ephem-lc.png')
kanpai.plot.simple_ts(t, f, fp=fp, color='b', alpha=0.3, mew=1, mec='k', ms=3)
ts, fs = kanpai.util.lc.fold(t, f, p, t0, t14, bl=True, skip=skip, ret_seg=True)

orb = range(len(ts))
# FIXME because of --skip option, cannot assume consecutive orbits

out = {}
if not args.mcmc:
    tc_best = []
    for t, f in zip(ts, fs):
        fit = kanpai.k2.fit.FitK2Tc(t, f, k, a, i, u1, u2, p)
        fit.run_map(make_plots=False)
        tc_best.append(fit.best['tc'])
    out['tc_best'] = tc_best
else:
    tc_best = []
    tc_perc = []
    tc_samples = []
    for t, f, o in zip(ts, fs, orb):
        fit = kanpai.k2.fit.FitK2Tc(t, f, k, a, i, u1, u2, p)
        fit.run_map(make_plots=False)
        fit.run_mcmc(make_plots=False, save=False, gr_threshold=args.gr)
        fp = os.path.join(input_dir, 'ephem-samples-tc{}.png'.format(o))
        fit.plot_samples(nmodel=500, fp=fp)
        summary = fit.summarize_mcmc(save=False)
        tc_best.append(summary['pv_best']['tc'])
        tc_perc.append(summary['percentiles']['tc'])
        tc_samples.append(fit._fc[:,fit._pv_names.index('tc')])
    out['tc_best'] = tc_best
    out['tc_perc'] = tc_perc

for o,tc in zip(orb, tc_best):
    print "Tc,{} = {}".format(o, tc)
t0, p = kanpai.util.stats.simple_ols(orb, tc_best)
print "Max. Prob. P = {}, T0 = {}".format(p, t0)

if not args.mcmc:
    fp = os.path.join(input_dir, 'ephem-oc.png')
    kanpai.plot.oc(orb, tc_best, p, t0, fp=fp)
    out['p'] = float(p)
    out['t0'] = float(t0)
else:
    ephem_samples = kanpai.util.transit.sample_ephem(orb, tc_samples)
    fp = os.path.join(input_dir, 'ephem-corner.png')
    kanpai.plot.corner(ephem_samples, labels=r'$T_0$ $P$'.split(), truths=[t0,p], fp=fp)
    perc = np.percentile(ephem_samples, [15.87,50.0,84.13], axis=0)
    (t0, t0_err), (p, p_err) = map(lambda x: (x[1], (x[1]-x[0], x[2]-x[1])), perc.T)
    tc_err = map(lambda x: (x[1]-x[0], x[2]-x[1]), tc_perc)
    tc_err = np.array(tc_err).T
    fp = os.path.join(input_dir, 'ephem-oc.png')
    kanpai.plot.oc(orb, tc_best, p, t0, tc_err=tc_err, p_err=p_err, fp=fp)
    out['p'] = float(p)
    out['t0'] = float(t0)
    out['p_err'] = [float(i) for i in p_err]
    out['t0_err'] = [float(i) for i in t0_err]

fp = os.path.join(input_dir, 'ephem-summary.yaml')
yaml.dump(out, open(fp, 'w'), default_flow_style=False)
