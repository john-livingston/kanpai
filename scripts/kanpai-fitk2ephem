#!/usr/bin/env python

import os
import sys
import argparse

import yaml
import numpy as np
import pandas as pd
import matplotlib
matplotlib.use('Agg')

import kanpai


cwd = os.path.abspath('.')

# General options
parser = argparse.ArgumentParser(description="Fit individual mid-transit times")
parser.add_argument('--input', help='Input directory (created by kanpai-fitk2)', type=str, default=cwd)
parser.add_argument('--setup', help='Path to YAML setup file', type=str, default=None)
parser.add_argument('--epic', help='EPIC ID', type=str, default=None)
parser.add_argument('--period', help='Period', type=float, default=None)
parser.add_argument('--t0', help='T0', type=float, default=None)
parser.add_argument('--t14', help='T14', type=float, default=None)
parser.add_argument('-w', '--width', help='Extraction width [days]',
    type=float, default=0.8)
parser.add_argument('-c', '--clip', help='sigma clip (upper, lower)',
    type=str, default='4,10')
parser.add_argument('--pipeline', help='which pipeline to use',
    type=str, default='everest')
parser.add_argument('--phot', help='Path to photometric time series '
    'file to use (instead of retrieving from --pipeline)', type=str, default=None)
parser.add_argument('--sc', help='K2 short cadence data',
    dest='short_cadence', action='store_true')
parser.add_argument('--skip', help='individual K2 epochs to skip'
    ', comma-separated', type=str, default=None)
parser.add_argument('--plot_individual', help='plot individual K2 epochs',
    dest='plot_individual', action='store_true')

# MCMC options
parser.add_argument('-n', '--nproc', help='number of processes to use', type=int, default=1)
parser.add_argument('--gr', type=float, default=1.1,
    help='Gelmin-Rubin threshold')
parser.add_argument('--nsteps1', type=int, default=int(500),
    help='number of initialization MCMC steps')
parser.add_argument('--nsteps2', type=int, default=int(1000),
    help='number of production MCMC steps')
parser.add_argument('--restart', dest='restart', help='restart MCMC',
    action='store_true')

parser.set_defaults(short_cadence=False, restart=False, plot_individual=False)

args = parser.parse_args()

if args.setup is None:
    assert args.epic and args.period and args.t0 and args.t14
    epic = args.epic
    p = args.period
    t0 = args.t0
    t14 = args.t14
else:
    setup = yaml.load(open(args.setup))
    epic = setup['config']['starid']
    p = setup['transit']['p']
    t0 = setup['transit']['t0']
    t14 = setup['transit']['t14']

width = args.width
input_dir = args.input
ns1 = args.nsteps1
ns2 = args.nsteps2

fp = os.path.join(input_dir, 'ephem-input.yaml')
yaml.dump(vars(args), open(fp, 'w'), default_flow_style=False)

if args.skip is not None:
    skip = [int(i) for i in args.skip.split(',')]
else:
    skip = args.skip

su, sl = [float(i) for i in args.clip.split(',')]

fp = os.path.join(input_dir, 'mcmc.npz')
npz = np.load(fp)
ps = npz['flat_chain']

if args.phot is None:
    t, f = kanpai.k2.lc.unfolded(epic, p, t0, t14, pipeline=args.pipeline)
else:
    t, f = np.loadtxt(args.phot, unpack=True)
    if t.max() < 2454833:
        t += 2454833

# initial sigma clip
idx = kanpai.util.stats.outliers(f, su=su, sl=sl)
t, f = t[~idx], f[~idx]

# get transit segments
tns = kanpai.util.lc.get_tns(t, p, t0)
fp = os.path.join(input_dir, 'ephem-lc.png')
kanpai.plot.simple_ts(t, f, fp=fp, vticks=tns, color='b', alpha=0.3, mew=1, mec='k', ms=3)
orb, ts, fs = kanpai.util.lc.fold(t, f, p, t0, t14, width=width, bl=True, skip=skip, ret_seg=True)

# individual sigma clip
for n, (o, t, f) in enumerate(zip(orb, ts, fs)):
    try:
        idx = kanpai.util.stats.outliers(f, su=su, sl=sl)
        ts[n], fs[n] = np.array(t)[~idx], np.array(f)[~idx]
        print "Sigma-clip for orbit {}: {} outliers identified for +{}/-{} sigma".format(o, idx.sum(), su, sl)
    except:
        print "Sigma-clip error at orbit {}: {} outliers identified for +{}/-{} sigma".format(o, idx.sum(), su, sl)

# sanitize
for o, t, f in zip(orb, ts, fs):
    if len(t) == 0 or len(f) == 0:
        idx = orb.index(o)
        orb.pop(idx)
        ts.pop(idx)
        fs.pop(idx)
        print "Removed bad transit at orbit {}".format(o)
        print "No data in window."
    elif len(t) != len(f):
        idx = orb.index(o)
        orb.pop(idx)
        ts.pop(idx)
        fs.pop(idx)
        print "Removed bad transit at orbit {}".format(o)
        print "Dimension mis-match: {} vs. {}".format(len(t), len(f))

out = {}
fp = os.path.join(input_dir, 'ephem-mcmc.npz')
if not os.path.isfile(fp) or args.restart:

    tc_best = []
    tc_perc = []
    tc_samples = []
    phase = np.array([])
    flux = np.array([])
    for o, t, f in zip(orb, ts, fs):
        fit = kanpai.k2.fit.FitK2Tc(t, f, p, ps, sc=args.short_cadence)
        fit.run_mcmc(make_plots=False, save=False, gr_threshold=args.gr,
            nproc=args.nproc, nsteps1=ns1, nsteps2=ns2)
        fp = os.path.join(input_dir, 'ephem-samples-tc{}.png'.format(o))
        if args.plot_individual:
            fit.plot_samples(nmodel=500, fp=fp)
        summary = fit.summarize_mcmc(save=False)
        tc_best.append(summary['pv_best']['tc'])
        tc_perc.append(summary['percentiles']['tc'])
        tc_samples.append(fit._fc[:,fit._pv_names.index('tc')])
        phase = np.append(phase, t-summary['pv_best']['tc'])
        flux = np.append(flux, f)

    out['tc_best'] = tc_best
    out['tc_perc'] = tc_perc

    # make TTV-corrected phasefolded light curve:
    idx = np.argsort(phase)
    phase = phase[idx]
    flux = flux[idx]
    fp = os.path.join(input_dir, 'ephem-folded.png')
    kanpai.plot.simple_ts(phase, flux, fp=fp)
    df = pd.DataFrame(dict(t=phase, f=flux))
    fp = os.path.join(input_dir, 'ephem-folded.csv')
    df['t f'.split()].to_csv(fp, index=False, header=False)

    # make tc sample sets same size:
    ns = [len(tcs) for tcs in tc_samples]
    ns_min = min(ns)
    for n,tcs in enumerate(tc_samples):
        tc_samples[n] = tcs[-ns_min:]

    fp = os.path.join(input_dir, 'ephem-mcmc.npz')
    np.savez_compressed(fp, orb=orb, tc_best=tc_best, tc_perc=tc_perc, tc_samples=tc_samples)

else:

    npz = np.load(fp)
    orb = npz['orb']
    tc_best = npz['tc_best']
    tc_perc = npz['tc_perc']
    tc_samples = npz['tc_samples']

    if skip is not None:
        idx = np.zeros(orb.size).astype(bool)
        for i in skip:
            idx |= orb == i
        orb = orb[~idx]
        tc_best = tc_best[~idx]
        tc_perc = tc_perc[~idx]
        tc_samples = tc_samples[~idx]

    out['tc_best'] = tc_best
    out['tc_perc'] = tc_perc

for o,tc in zip(orb, tc_best):
    print "Tc,{} = {}".format(o, tc)

t0, p = kanpai.util.stats.simple_ols(orb, tc_best)
print "Max. Prob. P = {}, T0 = {}".format(p, t0)

out['p_best'] = float(p)
out['t0_best'] = float(t0)
ephem_samples = kanpai.util.transit.sample_ephem(orb, tc_samples)
fp = os.path.join(input_dir, 'ephem-corner.png')
kanpai.plot.corner(ephem_samples, labels=r'$T_0$ $P$'.split(), truths=[t0,p], fp=fp)
perc = np.percentile(ephem_samples, [15.87,50.0,84.13], axis=0)
(t0, t0_err), (p, p_err) = map(lambda x: (x[1], (x[1]-x[0], x[2]-x[1])), perc.T)
tc_err = map(lambda x: (x[1]-x[0], x[2]-x[1]), tc_perc)
tc_err = np.array(tc_err).T
fp = os.path.join(input_dir, 'ephem-oc.png')
kanpai.plot.oc(orb, tc_best, p, t0, tc_err=tc_err, p_err=p_err, fp=fp)
out['p_med'] = float(p)
out['t0_med'] = float(t0)
out['p_err'] = [float(i) for i in p_err]
out['t0_err'] = [float(i) for i in t0_err]

fp = os.path.join(input_dir, 'ephem-summary.yaml')
yaml.dump(out, open(fp, 'w'), default_flow_style=False)
