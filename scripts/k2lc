#!/usr/bin/env python

import os
import sys
import argparse

import numpy as np
import matplotlib
matplotlib.use('Agg')

import kanpai


K2_TIME_OFFSET = 2454833

cwd = os.path.abspath('.')

parser = argparse.ArgumentParser(description="Get phased-folded K2"
    " Everest light curve")
parser.add_argument('epic', help='Target star EPIC id number', type=int)
parser.add_argument('period', help='Period of candidate [days]', type=float)
parser.add_argument('t0', help='Time of first transit [BJD]', type=float)
parser.add_argument('t14', help='Transit duration [days]', type=float)
parser.add_argument('-w', '--width', help='Extraction width [days]',
    type=float, default=0.8)
parser.add_argument('-o', '--outdir', help='output directory',
    type=str, default=cwd)
parser.add_argument('--pipeline', help='which pipeline to use',
    type=str, default='everest')
parser.add_argument('-p', '--plot', dest='plot', help='make a plot',
    action='store_true')
parser.add_argument('-b', '--baseline', dest='baseline', help='fit a'
    ' linear baseline model to each transit', action='store_true')
parser.add_argument('--refine', dest='refine', action='store_true',
    help='refine transit duration')
parser.add_argument('-c', '--clip', help='sigma clip (upper, lower)',
    type=str, default=None)
parser.add_argument('-s', '--skip', help='individual K2 epochs to skip'
    ', comma-separated', type=str, default=None)
parser.set_defaults(plot=False, baseline=False, refine=False)
args = parser.parse_args()

epic = args.epic
p = args.period
t0 = args.t0 - K2_TIME_OFFSET
t14 = args.t14
width = args.width
outdir = args.outdir
plot = args.plot
baseline = args.baseline
pipeline = args.pipeline

if args.clip:
    clip = [float(i) for i in args.clip.split(',')]
else:
    clip = args.clip

if args.skip:
    skip = [int(i) for i in args.skip.split(',')]
else:
    skip = args.skip

tf, ff = kanpai.k2.lc.folded(epic, p, t0, t14, pipeline=pipeline,
    width=width, clip=clip, bl=baseline, skip=skip)

if args.refine:
    fit = kanpai.k2.Fit(tf, ff, t14=t14, p=p)
    fit.max_apo()
    t14 = fit.t14()
    print "refined transit duration: {} [days]".format(t14)
    fp = os.path.join(outdir, 'k2_lc_{}-{}-fit.png'.format(epic, pipeline))
    fit.plot(fp, lw=5, ms=10, nmodel=1000)
    tf, ff = kanpai.k2.lc.folded(epic, p, t0, t14, pipeline=pipeline,
        width=width, clip=clip, bl=baseline, skip=skip)
elif plot:
    idx = (tf < -t14/2.) | (t14/2. < tf)
    title = "OOT std dev: {}".format(ff[idx].std())
    fp = os.path.join(outdir, 'k2_lc_{}-{}.png'.format(epic, pipeline))
    kanpai.k2.plot.simple_ts(tf, ff, fp=fp, title=title, lw=5, ms=10)

fp = os.path.join(outdir, 'k2_lc_{}-{}.csv'.format(epic, pipeline))
np.savetxt(fp, np.c_[tf, ff], delimiter=',')
