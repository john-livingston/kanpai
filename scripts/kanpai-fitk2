#!/usr/bin/env python

import os
import sys
import glob
import argparse

import yaml
import numpy as np
import pandas as pd
import matplotlib
matplotlib.use('Agg')

import kanpai


cwd = os.path.abspath('.')
csvs = glob.glob('./*.csv')
fp_csv = csvs[0] if len(csvs) > 0 else None

# General options
parser = argparse.ArgumentParser(description="Fit K2 light curve")
parser.add_argument('-i', '--input', help='light curve file (CSV)', type=str, default=fp_csv)
parser.add_argument('-o', '--out_dir', help='output directory', type=str, default=cwd)
parser.add_argument('-p', '--period', help='period [days]', type=float)
parser.add_argument('--bin_k2', help='bin size for K2 data [seconds]',
    type=int, default=None)
parser.add_argument('--setup', help='Path to YAML setup file', type=str, default=None)
parser.add_argument('--sc', help='K2 short cadence data',
    dest='short_cadence', action='store_true')
parser.add_argument('-w', '--width', help='Trim input light curve to width [days]',
    type=float, default=None)

# Limb-darkening options
parser.add_argument('--ld', help='sample in "q" or "u" limb-darkening space', default='q')
parser.add_argument('--teff', help='host star teff,uteff', type=str, default=None)
parser.add_argument('--logg', help='host star logg,ulogg', type=str, default=None)
parser.add_argument('--feh', help='host star feh,ufeh', type=str, default=None)
parser.add_argument('--ldp', help='apply K2 limb-darkening prior (u1_mu, u1_sig, u2_mu, u2_sig)',
    default=None, type=str)
parser.add_argument('--ldp_exofop', help='try Teff and logg from ExoFOP for LD priors',
    type=str, default=None)

# MCMC options
parser.add_argument('-n', '--nproc', help='number of processes to use', type=int, default=1)
parser.add_argument('--gr', type=float, default=1.1,
    help='Gelmin-Rubin threshold')
parser.add_argument('--nsteps1', type=int, default=int(1e3),
    help='number of initialization MCMC steps')
parser.add_argument('--nsteps2', type=int, default=int(1e3),
    help='number of production MCMC steps')
parser.add_argument('--max_steps', type=int, default=int(1e4),
    help='maximum number of MCMC steps')
parser.add_argument('--burn', type=int, default=None,
    help='number of MCMC steps to discard for final burn-in')
parser.add_argument('--no_save', help='do not save MCMC samples', dest='save', action='store_false')
parser.add_argument('--restart', dest='restart', help='restart MCMC',
    action='store_true')
parser.add_argument('--resume', dest='resume', help='resume MCMC'
    ' from previous best position', action='store_true')


parser.set_defaults(short_cadence=False, save=True, restart=False, resume=False)

args = parser.parse_args()

if fp_csv is None:
    sys.exit('Must supply the path to photometry CSV file or place in working directory')

if args.ld == 'q':
    logprob = kanpai.k2.prob.logprob_q
elif args.ld == 'u':
    logprob = kanpai.k2.prob.logprob_u
else:
    sys.exit('Limb-darkening space must be "q" or "u"')

if args.setup is not None:
    print("Reading setup file: {}".format(args.setup))
    setup = yaml.load(open(args.setup))
    p = setup['transit']['p']
else:
    p = args.period

bin_k2 = args.bin_k2
out_dir = args.out_dir
if not os.path.isdir(out_dir):
    os.mkdir(out_dir)
nproc = args.nproc
save = args.save
gr_threshold = args.gr
ns1 = args.nsteps1
ns2 = args.nsteps2
ms = args.max_steps
burn = args.burn
restart = args.restart
resume = args.resume

fp = os.path.join(out_dir, 'input.yaml')
yaml.dump(vars(args), open(fp, 'w'), default_flow_style=False)

# Load data
if args.input is None:
    k2lc = setup['config']['k2lc']
else:
    try:
        k2lc = args.input
    except:
        sys.exit('Need path to folded light curve (via --input or in setup file)')
df = kanpai.k2.io.load_k2(k2lc, binning=bin_k2, trim=args.width)
t, f = df['t f'.split()].values.T

def print_ldp(band, ldp):
    msg = "Applying limb-darkening priors for {0}: u1"
    msg += " = {1:.4f} +/- {2:.4f}, u2 = {3:.4f} +/- {4:.4f}"
    print msg.format(band, *ldp)

# handle K2 limb-darkening priors
ldp = None
if args.ldp is not None:
    ldp = [float(i) for i in args.ldp.split(',')]
    print_ldp("K2", ldp)
elif args.setup is not None:
    teff, uteff = setup['stellar']['teff']
    logg, ulogg = setup['stellar']['logg']
    feh, ufeh = setup['stellar']['feh']
    ldp = kanpai.k2.ld.claret(teff, uteff, logg, ulogg, feh, ufeh)
    print_ldp("K2", ldp)
elif args.ldp_exofop is not None:
    try:
        import exofop
        res = exofop.get_stellar(args.ldp_exofop)
        teff, uteff = res['Teff']
        logg, ulogg = res['logg']
        feh, ufeh = res['feh']
        ldp = kanpai.k2.ld.claret(teff, uteff, logg, ulogg, feh, ufeh)
        print_ldp("K2", ldp)
    except:
        print "No limb-darkening priors applied for K2"
else:
    try:
        teff, uteff = [float(i) for i in args.teff.split(',')]
        logg, ulogg = [float(i) for i in args.logg.split(',')]
        feh, ufeh = [float(i) for i in args.feh.split(',')]
        ldp = kanpai.k2.ld.claret(teff, uteff, logg, ulogg, feh, ufeh)
        print_ldp("K2", ldp)
    except:
        print "No limb-darkening priors applied for K2"

if ldp is not None:
    fp = os.path.join(out_dir, 'ld-prior.yaml')
    ldp_dict = dict(zip('u1 u1_sig u2 u2_sig'.split(), [float(i) for i in ldp]))
    yaml.dump(ldp_dict, open(fp, 'w'), default_flow_style=False)

# Instantiate Fit object
fit = kanpai.k2.FitK2(t, f, p=p, out_dir=out_dir, logprob=logprob, sc=args.short_cadence)

# Apply limb-darkening priors
fit.set_ld_prior(ldp)

# Run MAP, MCMC, and output plots, samples, etc.
fit.run_map(make_plots=True, nmodel=1000)
fit.run_mcmc(nproc=nproc, save=save, nsteps1=ns1, nsteps2=ns2, max_steps=ms, burn=burn,
    gr_threshold=gr_threshold, make_plots=True, restart=restart, resume=resume)
fit.plot_mcmc(nmodel=1000)
fit.summarize_mcmc()

fp = os.path.join(out_dir, 'mcmc.npz')
kanpai.k2.util.make_samples_h5(fp, p)
