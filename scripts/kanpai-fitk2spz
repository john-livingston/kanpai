#!/usr/bin/env python

import os
import sys
import argparse
import multiprocessing

import yaml
import numpy as np
import pandas as pd
import matplotlib
matplotlib.use('Agg')

import kanpai


cwd = os.path.abspath('.')

parser = argparse.ArgumentParser(description="Fit Spitzer light curve")
parser.add_argument('-i', '--input', help='YAML setup file', type=str)
parser.add_argument('-o', '--out_dir', help='output directory', type=str, default=cwd)
parser.add_argument('-p', '--period', help='period [days]', type=float)
parser.add_argument('-n', '--nproc', help='number of processes to use', type=int, default=None)
parser.add_argument('--teff', help='host star teff,uteff', type=str, default=None)
parser.add_argument('--logg', help='host star logg,ulogg', type=str, default=None)
parser.add_argument('--save', help='save MCMC samples', dest='save', action='store_true')
parser.add_argument('--ld', help='sample in "q" or "u" limb darkening space', default='q')
parser.add_argument('--ldp', help='apply limb darkening prior', dest='ldp', action='store_true')
parser.add_argument('--cen', help='detrend via centroids', dest='cen', action='store_true')
parser.add_argument('--pld', help='detrend via PLD', dest='pld', action='store_true')
parser.add_argument('--gr', type=float, default=1.1,
    help='Gelmin-Rubin threshold')
parser.add_argument('--nsteps1', type=int, default=int(1e3),
    help='number of initialization MCMC steps')
parser.add_argument('--nsteps2', type=int, default=int(1e3),
    help='number of production MCMC steps')
parser.add_argument('--max_steps', type=int, default=int(1e4),
    help='maximum number of MCMC steps')

parser.set_defaults(save=False, ldp=False, cen=False, pld=False)


args = parser.parse_args()

if args.ldp and (args.teff is None or args.logg is None):
    sys.exit("need stellar parameters (teff, logg) for limb darkening prior")

if args.ld == 'q':
    logprob = kanpai.spz.prob.logprob_q
elif args.ld == 'u':
    logprob = kanpai.spz.prob.logprob_u
else:
    sys.exit('limb-darkening space must be "q" or "u"')

p = args.period
out_dir = args.out_dir
if not os.path.isdir(out_dir):
    os.mkdir(out_dir)
if args.nproc is not None:
    nproc = args.nproc
else:
    nproc = multiprocessing.cpu_count()
save = args.save
gr_threshold = args.gr
ns1 = args.nsteps1
ns2 = args.nsteps2
ms = args.max_steps

setup = yaml.load(open(args.input))
df_spz, pix = kanpai.spz.io.load_spz(setup, out_dir=out_dir)

df_k2 = kanpai.k2.io.load_k2(setup['config']['k2lc'])

aux = None
if args.cen:
    aux = df_spz['x y'.split()].values.T
elif args.pld:
    aux = pix.T

fit = kanpai.spz.simfit.FitK2Spz(setup, df_k2, df_spz, aux, out_dir=out_dir)
if args.ldp:
    teff, uteff = [float(i) for i in args.teff.split(',')]
    logg, ulogg = [float(i) for i in args.logg.split(',')]
    ldp_spz = kanpai.spz.ld.get_ld_claret(teff, uteff, logg, ulogg)
    ldp_k2 = kanpai.k2.ld.get_ld_claret(teff, uteff, logg, ulogg)
    fit.set_ld_prior(ldp_k2, ldp_spz)
fit.run_map(make_plots=False)
fit.post_map()
fit.run_mcmc(nproc=nproc, save=save, nsteps1=ns1, nsteps2=ns2, max_steps=ms, gr_threshold=gr_threshold, make_plots=False)
fit.post_mcmc()
