#!/usr/bin/env python

import os
import sys
import glob
import argparse

import yaml
import numpy as np
import pandas as pd
import matplotlib
matplotlib.use('Agg')

import kanpai


cwd = os.path.abspath('.')
# yamls = glob.glob('./*.yaml')
# fp_yaml = yamls[0] if len(yamls) > 0 else None

# General options
parser = argparse.ArgumentParser(description="simultaneously fit Spitzer and K2 light curves")
parser.add_argument('--setup', help='YAML setup file', type=str, default=None)
parser.add_argument('-o', '--out_dir', help='output directory', type=str, default=cwd)

# K2 options
parser.add_argument('--k2lc', help='k2 folded lc file',
    type=str, default=None)
parser.add_argument('--bin_k2', help='bin size for K2 data [seconds]',
    type=int, default=None)

# Spitzer options
parser.add_argument('--bin_spz', help='bin size for'
    ' Spitzer data [seconds]', type=int, default=None)
parser.add_argument('--geom', help='pixel geometry for PLD',
    type=str, default=None)
parser.add_argument('--radius', help='Spitzer photometric aperture radius',
    type=float, default=None)

# Limb-darkening options
# parser.add_argument('--ld', help='sample in "q" or "u" limb darkening space', default='q')
parser.add_argument('--teff', help='host star teff,uteff', type=str, default=None)
parser.add_argument('--logg', help='host star logg,ulogg', type=str, default=None)
parser.add_argument('--feh', help='host star feh,ufeh', type=str, default=None)
parser.add_argument('--ldp_k2', help='apply K2 limb darkening prior (u1_mu, u1_sig, u2_mu, u2_sig)',
    default=None, type=str)
parser.add_argument('--ldp_spz', help='apply Spitzer limb darkening prior (u1_mu, u1_sig, u2_mu, u2_sig)',
    default=None, type=str)

# Detrending options
parser.add_argument('--cen', help='detrend via centroids', dest='cen', action='store_true')
parser.add_argument('--pld', help='detrend via PLD', dest='pld', action='store_true')

# MCMC options
parser.add_argument('-n', '--nproc', help='number of processes to use', type=int, default=1)
parser.add_argument('--gr', type=float, default=1.1,
    help='Gelmin-Rubin threshold')
parser.add_argument('--nsteps1', type=int, default=int(1e3),
    help='number of initialization MCMC steps')
parser.add_argument('--nsteps2', type=int, default=int(1e3),
    help='number of production MCMC steps')
parser.add_argument('--max_steps', type=int, default=int(1e4),
    help='maximum number of MCMC steps')
parser.add_argument('--burn', type=int, default=None,
    help='number of MCMC steps to discard for final burn-in')
parser.add_argument('--no_save', help='do not save MCMC samples', dest='save', action='store_false')
parser.add_argument('--restart', dest='restart', help='restart MCMC',
    action='store_true')
parser.add_argument('--resume', dest='resume', help='resume MCMC'
    ' from previous best position', action='store_true')


parser.set_defaults(save=True, ldp=False, cen=False, pld=False, restart=False, resume=False)

args = parser.parse_args()

if args.setup is None:
    sys.exit('Must supply the path to YAML setup file')


k2lc = args.k2lc
bin_k2 = args.bin_k2
bin_spz = args.bin_spz
geom = args.geom
radius = args.radius
out_dir = args.out_dir
if not os.path.isdir(out_dir):
    os.mkdir(out_dir)
nproc = args.nproc
save = args.save
gr_threshold = args.gr
ns1 = args.nsteps1
ns2 = args.nsteps2
ms = args.max_steps
burn = args.burn
restart = args.restart
resume = args.resume

print("Reading setup file: {}".format(args.setup))
setup = yaml.load(open(args.setup))

# YAML setup file config overrides
keys = 'k2lc binsize geom nsteps1 nsteps2 maxsteps grthreshold nthreads bin_k2 radius'.split()
vals = k2lc, bin_spz, geom, ns1, ns2, ms, gr_threshold, nproc, bin_k2, radius
for k,v in zip(keys, vals):
    if v is not None:
        setup['config'][k] = v

# Load data
df_spz, pix = kanpai.spz.io.load_spz(setup, out_dir=out_dir)
if not os.path.isabs(setup['config']['k2lc']):
    try:
        setup_dir = os.path.abspath(os.path.dirname(args.setup))
        fp = os.path.join(setup_dir, setup['config']['k2lc'])
    except:
        sys.exit('Error: unable to locate K2 light curve file')
else:
    df_k2 = kanpai.k2.io.load_k2(setup['config']['k2lc'], binning=bin_k2)

# Setup auxiliary vectors for Spitzer detrending
aux = None
if args.cen:
    aux = df_spz['x y'.split()].values.T
elif args.pld:
    aux = pix.T

def print_ldp(band, ldp):
    msg = "Applying limb-darkening priors for {0}: u1"
    msg += " = {1:.4f} +/- {2:.4f}, u2 = {3:.4f} +/- {4:.4f}"
    print msg.format(band, *ldp)

# handle K2 limb-darkening priors
ldp_k2 = None
if args.ldp_k2 is not None:
    ldp_k2 = [float(i) for i in args.ldp_k2.split(',')]
    print_ldp("K2", ldp_k2)
elif args.ldp_k2 is None:
    try:
        ldp_k2 = setup['ld']['kep']
        print_ldp("K2", ldp_k2)
    except:
        try:
            teff, uteff = [float(i) for i in args.teff.split(',')]
            logg, ulogg = [float(i) for i in args.logg.split(',')]
            feh, ufeh = [float(i) for i in args.feh.split(',')]
            ldp_k2 = kanpai.k2.ld.claret(teff, uteff, logg, ulogg, feh, ufeh)
            print_ldp("K2", ldp_k2)
        except:
            try:
                teff, uteff = setup['stellar']['teff']
                logg, ulogg = setup['stellar']['logg']
                feh, ufeh = setup['stellar']['feh']
                ldp_k2 = kanpai.k2.ld.claret(teff, uteff, logg, ulogg, feh, ufeh)
                print_ldp("K2", ldp_k2)
            except:
                print "No limb-darkening priors applied for K2"

# handle Spitzer limb-darkening priors
ldp_spz = None
if args.ldp_spz is not None:
    ldp_spz = [float(i) for i in args.ldp_spz.split(',')]
    print_ldp("Spitzer", ldp_spz)
elif args.ldp_spz is None:
    try:
        ldp_spz = setup['ld']['spz']
        print_ldp("Spitzer", ldp_spz)
    except:
        try:
            teff, uteff = [float(i) for i in args.teff.split(',')]
            logg, ulogg = [float(i) for i in args.logg.split(',')]
            feh, ufeh = [float(i) for i in args.feh.split(',')]
            ldp_spz = kanpai.spz.ld.claret(teff, uteff, logg, ulogg, feh, ufeh)
            print_ldp("Spitzer", ldp_spz)
        except:
            try:
                teff, uteff = setup['stellar']['teff']
                logg, ulogg = setup['stellar']['logg']
                feh, ufeh = setup['stellar']['feh']
                ldp_spz = kanpai.spz.ld.claret(teff, uteff, logg, ulogg, feh, ufeh)
                print_ldp("Spitzer", ldp_spz)
            except:
                print "No limb-darkening priors applied for Spitzer"

if 'ld' not in setup.keys():
    setup['ld'] = {}
setup['ld']['kep'] = ldp_k2
setup['ld']['spz'] = ldp_spz

# Instantiate Fit object
fit = kanpai.spz.simfit.FitK2Spz(setup, df_k2, df_spz, aux, out_dir=out_dir)

# Apply limb-darkening priors
fit.set_ld_prior(ldp_k2, ldp_spz)

# Run MAP, MCMC, and output plots, samples, etc.
fit.run_map(make_plots=False)
fit.post_map()
fit.run_mcmc(nproc=nproc, save=save, nsteps1=ns1, nsteps2=ns2, max_steps=ms, burn=burn,
    gr_threshold=gr_threshold, make_plots=True, restart=restart, resume=resume)
fit.post_mcmc()
fit.summarize_mcmc()

fp = os.path.join(out_dir, 'mcmc.npz')
kanpai.spz.simfit.transit_params_h5(fp, p)
