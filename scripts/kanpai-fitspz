#!/usr/bin/env python

import os
import sys
import glob
import argparse
import multiprocessing

import yaml
import numpy as np
import pandas as pd
import matplotlib
matplotlib.use('Agg')

import kanpai


cwd = os.path.abspath('.')
yamls = glob.glob('./*.yaml')
fp_yaml = yamls[0] if len(yamls) > 0 else None

# General options
parser = argparse.ArgumentParser(description="Fit Spitzer light curve")
parser.add_argument('--setup', help='YAML setup file', type=str, default=fp_yaml)
parser.add_argument('-o', '--out_dir', help='output directory', type=str, default=cwd)

# Spitzer options
parser.add_argument('--bin_spz', help='bin size for'
    ' Spitzer data [seconds]', type=int, default=None)
parser.add_argument('--geom', help='pixel geometry for PLD',
    type=str, default=None)
parser.add_argument('--radius', help='Spitzer photometric aperture radius',
    type=float, default=None)

# Limb-darkening options
parser.add_argument('--ld', help='sample in "q" or "u" limb darkening space', default='q')
parser.add_argument('--teff', help='host star teff,uteff', type=str, default=None)
parser.add_argument('--logg', help='host star logg,ulogg', type=str, default=None)
parser.add_argument('--feh', help='host star feh,ufeh', type=str, default=None)
parser.add_argument('--ldp', help='apply Spitzer limb darkening prior (u1_mu, u1_sig, u2_mu, u2_sig)',
    default=None, type=str)

# Detrending options
parser.add_argument('--cen', help='detrend via centroids', dest='cen', action='store_true')
parser.add_argument('--pld', help='detrend via PLD', dest='pld', action='store_true')

# MCMC options
parser.add_argument('-n', '--nproc', help='number of processes to use', type=int, default=None)
parser.add_argument('--gr', type=float, default=1.1,
    help='Gelmin-Rubin threshold')
parser.add_argument('--nsteps1', type=int, default=int(1e3),
    help='number of initialization MCMC steps')
parser.add_argument('--nsteps2', type=int, default=int(1e3),
    help='number of production MCMC steps')
parser.add_argument('--max_steps', type=int, default=int(1e4),
    help='maximum number of MCMC steps')
parser.add_argument('--burn', type=int, default=None,
    help='number of MCMC steps to discard for final burn-in')
parser.add_argument('--no_save', help='do not save MCMC samples', dest='save', action='store_false')
parser.add_argument('--restart', dest='restart', help='restart MCMC',
    action='store_true')
parser.add_argument('--resume', dest='resume', help='resume MCMC'
    ' from previous best position', action='store_true')


parser.set_defaults(save=True, cen=False, pld=False, restart=False, resume=False)

args = parser.parse_args()

if fp_yaml is None:
    sys.exit('Must supply the path to YAML setup file or place in working directory')

if args.ld == 'q':
    logprob = kanpai.spz.prob.logprob_q
elif args.ld == 'u':
    logprob = kanpai.spz.prob.logprob_u
else:
    sys.exit('limb-darkening space must be "q" or "u"')

bin_spz = args.bin_spz
geom = args.geom
radius = args.radius
out_dir = args.out_dir
if not os.path.isdir(out_dir):
    os.mkdir(out_dir)
if args.nproc is not None:
    nproc = args.nproc
else:
    nproc = multiprocessing.cpu_count()
save = args.save
gr_threshold = args.gr
ns1 = args.nsteps1
ns2 = args.nsteps2
ms = args.max_steps
burn = args.burn
restart = args.restart
resume = args.resume

print("Reading setup file: {}".format(args.setup))
setup = yaml.load(open(args.setup))

# YAML setup file config overrides
keys = 'binsize geom nsteps1 nsteps2 maxsteps grthreshold nthreads radius'.split()
vals = bin_spz, geom, ns1, ns2, ms, gr_threshold, nproc, radius
for k,v in zip(keys, vals):
    if v is not None:
        setup['config'][k] = v

fp = os.path.join(out_dir, 'input.yaml')
yaml.dump(vars(args), open(fp, 'w'), default_flow_style=False)

fp = os.path.join(out_dir, 'setup.yaml')
yaml.dump(setup, open(fp, 'w'), default_flow_style=False)

# Load data
df, pix = kanpai.spz.io.load_spz(setup, out_dir=out_dir)
t, f = df['t f'.split()].values.T

# Setup auxiliary vectors for Spitzer detrending
aux = None
if args.cen:
    aux = df['x y'.split()].values.T
elif args.pld:
    aux = pix.T

def print_ldp(band, ldp):
    msg = "Applying limb-darkening priors for {0}: u1"
    msg += " = {1:.4f} +/- {2:.4f}, u2 = {3:.4f} +/- {4:.4f}"
    print msg.format(band, *ldp)

# handle Spitzer limb-darkening priors
ldp = None
if args.ldp is not None:
    ldp = [float(i) for i in args.ldp.split(',')]
    print_ldp("Spitzer", ldp)
elif args.ldp is None:
    try:
        ldp = setup['ld']['spz']
        print_ldp("Spitzer", ldp)
    except:
        try:
            teff, uteff = [float(i) for i in args.teff.split(',')]
            logg, ulogg = [float(i) for i in args.logg.split(',')]
            feh, ufeh = [float(i) for i in args.feh.split(',')]
            ldp = kanpai.spz.ld.claret(teff, uteff, logg, ulogg, feh, ufeh)
            print_ldp("Spitzer", ldp)
        except:
            try:
                teff, uteff = setup['stellar']['teff']
                logg, ulogg = setup['stellar']['logg']
                feh, ufeh = setup['stellar']['feh']
                ldp = kanpai.spz.ld.claret(teff, uteff, logg, ulogg, feh, ufeh)
                print_ldp("Spitzer", ldp)
            except:
                print "No limb-darkening priors applied for Spitzer"

if 'ld' not in setup.keys():
    setup['ld'] = {}
setup['ld']['spz'] = ldp

# Instantiate Fit object
p = setup['transit']['p']
fit = kanpai.spz.FitSpz(t, f, p=p, aux=aux, out_dir=out_dir, logprob=logprob)

# Apply limb-darkening priors
fit.set_ld_prior(ldp)

# Run MAP, MCMC, and output plots, samples, etc.
fit.run_map()
fit.run_mcmc(nproc=nproc, save=save, nsteps1=ns1, nsteps2=ns2, max_steps=ms,
    gr_threshold=gr_threshold, restart=restart, resume=resume)
fit.post_mcmc()
fit.summarize_mcmc()
