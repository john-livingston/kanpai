#!/usr/bin/env python

import os
import argparse

import matplotlib
matplotlib.use('Agg')

import kanpai


parser = argparse.ArgumentParser(description="Simultaneously fit"
    " K2 and Spitzer data")
parser.add_argument('input', help='path to input yaml file', type=str)
parser.add_argument('-k', '--k2', help='k2 folded lc file',
    type=str, default=None)
parser.add_argument('-o', '--out_dir', help='output dir',
    type=str, default=None)
parser.add_argument('-d', '--data_dir', help='dir containing *_phot.pkl',
    type=str, default=None)
parser.add_argument('-b', '--bin_size', help='bin size for'
    ' Spitzer data [seconds]', type=int, default=60)
parser.add_argument('-c', '--clobber', dest='clobber', help='overwrite',
    action='store_true')
parser.add_argument('-s', '--save', dest='save', help='save MCMC samples',
    action='store_true')
parser.add_argument('-r', '--restart', dest='restart', help='restart MCMC',
    action='store_true')
parser.add_argument('-m', '--method', type=str, default='cen',
    help='detrending method to use (cen or pld)')
parser.add_argument('--nthreads', type=int, default=4,
    help='number of threads (processes) to use for MCMC')
parser.add_argument('--nsteps1', type=int, default=1000,
    help='number of initialization MCMC steps')
parser.add_argument('--nsteps2', type=int, default=1000,
    help='number of production MCMC steps')
parser.add_argument('--max_steps', type=int, default=10000,
    help='maximum number of MCMC steps')
parser.add_argument('--gr_threshold', type=float, default=1.1,
    help='Gelmin-Rubin threshold')
parser.add_argument('--pipeline', help='which pipeline to use',
    type=str, default='everest')
parser.add_argument('--skip', help='individual K2 epochs to skip'
    ', comma-separated', type=str, default=None)
parser.add_argument('--clip', help='sigma clip (upper, lower)',
    type=str, default=None)
parser.add_argument('--refine', dest='refine', action='store_true',
    help='refine transit duration')

parser.set_defaults(clobber=False, save=False, restart=False, refine=False)

args = parser.parse_args()


spz_setup_fp = args.input
bin_size = args.bin_size
clobber = args.clobber
save = args.save
method = args.method
nsteps1 = args.nsteps1
nsteps2 = args.nsteps2
max_steps = args.max_steps
gr_threshold = args.gr_threshold
nthreads = args.nthreads
restart = args.restart
pipeline = args.pipeline
refine = args.refine

if args.clip:
    clip = [float(i) for i in args.clip.split(',')]
else:
    clip = args.clip

if args.skip:
    skip = [int(i) for i in args.skip.split(',')]
else:
    skip = args.skip

METHODS = 'cen pld none'.split()
assert method in METHODS

setup = kanpai.util.parse_setup(spz_setup_fp)
tr = setup['transit']

if args.out_dir:
    out_dir = args.out_dir
else:
    out_dir = setup['config']['star']
    if 'planet' in setup['config'].keys():
        out_dir += setup['config']['planet']
    out_dir += '-{}'.format(method)
    out_dir += '-{}'.format(pipeline)

if os.path.isdir(out_dir) and not clobber:
    raise IOError("Output directory exists and clobber set to False")
elif not os.path.isdir(out_dir):
    os.mkdir(out_dir)

if args.data_dir:
    setup['config']['data_dir'] = args.data_dir

if args.k2:
    k2_kolded_fp = args.k2
else:
    import numpy as np
    epic = int(setup['config']['star'].split('-')[1])
    p, t0, t14 = tr['p'], tr['t0'], tr['t14']
    t0 -= 2454833
    width = t14*4 if t14 > 0.2 else 0.8
    tf, ff = kanpai.k2.lc.folded(epic, p, t0, t14, pipeline=pipeline,
        width=width, clip=clip, bl=True, skip=skip, refine=refine)
    k2_kolded_fp = os.path.join(out_dir, 'k2_lc_{}.csv'.format(epic))
    np.savetxt(k2_kolded_fp, np.c_[tf, ff], delimiter=',')

kanpai.k2spz.go(setup, method, bin_size, nsteps1, nsteps2, max_steps,
    gr_threshold, out_dir, save, nthreads, k2_kolded_fp, restart)
