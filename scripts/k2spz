#!/usr/bin/env python

import os
import argparse

import matplotlib
matplotlib.use('Agg')

import kanpai


parser = argparse.ArgumentParser(description="Simultaneously fit"
    " K2 and Spitzer data")
parser.add_argument('-i', '--input', help='path to input yaml file', type=str, default=None)
parser.add_argument('-o', '--outdir', help='output dir',
    type=str, default=None)
parser.add_argument('-d', '--datadir', help='dir containing *_phot.pkl',
    type=str, default=None)
parser.add_argument('--k2lc', help='k2 folded lc file',
    type=str, default=None)
parser.add_argument('--binsize', help='bin size for'
    ' Spitzer data [seconds]', type=int, default=None)
parser.add_argument('--bin_k2', help='bin size for K2 data [seconds]',
    type=int, default=None)
parser.add_argument('--geom', help='pixel geometry for PLD',
    type=str, default=None)
parser.add_argument('--radius', help='Spitzer photometric aperture radius',
    type=float, default=None)
parser.add_argument('--clobber', dest='clobber', help='overwrite',
    action='store_true')
parser.add_argument('--restart', dest='restart', help='restart MCMC',
    action='store_true')
parser.add_argument('--resume', dest='resume', help='resume MCMC'
    ' from previous best position', action='store_true')
parser.add_argument('--method', type=str, default='pld',
    help='detrending method to use')
parser.add_argument('--nthreads', type=int, default=None,
    help='number of threads (processes) to use for MCMC')
parser.add_argument('--nsteps1', type=int, default=None,
    help='number of initialization MCMC steps')
parser.add_argument('--nsteps2', type=int, default=None,
    help='number of production MCMC steps')
parser.add_argument('--maxsteps', type=int, default=None,
    help='maximum number of MCMC steps')
parser.add_argument('--grthreshold', type=float, default=None,
    help='Gelmin-Rubin threshold')
parser.add_argument('--percentiles', type=str, default=None,
    help='Percentiles for final plot, comma-separated'
    ' (default is 50,16,84). Alternative: 50,2.5,97.5,16,84')
parser.add_argument('--plot_binned', dest='plot_binned', action='store_true',
    help='include binned datapoints in final plot')

parser.set_defaults(clobber=False, restart=False, resume=False, plot_binned=False)

args = parser.parse_args()


spz_setup_fp = args.input
binsize = args.binsize
geom = args.geom
clobber = args.clobber
method = args.method
nsteps1 = args.nsteps1
nsteps2 = args.nsteps2
maxsteps = args.maxsteps
grthreshold = args.grthreshold
nthreads = args.nthreads
restart = args.restart
resume = args.resume
k2lc = args.k2lc
plot_binned = args.plot_binned
bin_k2 = args.bin_k2
radius = args.radius

if args.percentiles is not None:
    percs = [float(i) for i in args.percentiles.split(',')]
else:
    percs = [50,16,84]

save = True
pipeline = None
refine = True
clip = None
skip = None

METHODS = 'base cen pld pca pca2 pca-quad cen-quad pld-quad'.split()
assert method in METHODS

GEOMETRY = '3x3 5x5'
if geom is not None:
    assert geom in GEOMETRY

setup = kanpai.util.parse_setup(spz_setup_fp)

if args.outdir:
    outdir = args.outdir
else:
    prefix = setup['config']['prefix']
    starid = setup['config']['starid']
    outdir = '{}-{}'.format(prefix, starid)
    if 'planet' in setup['config'].keys():
        outdir += setup['config']['planet']
    if 'epoch' in setup['config'].keys():
        outdir += '_e' + str(setup['config']['epoch'])
    outdir += '-{}'.format(method)
    if geom is not None:
        outdir += '-{}'.format(geom)
    if radius is not None:
        outdir += '-r{}'.format(radius)

clobbering = False
if os.path.isdir(outdir) and not clobber:
    raise IOError("Output directory exists and clobber set to False")
elif not os.path.isdir(outdir):
    os.mkdir(outdir)
else:
    clobbering = True

if args.datadir:
    setup['config']['datadir'] = args.datadir

args = 'k2lc binsize geom nsteps1 nsteps2 maxsteps grthreshold nthreads bin_k2 radius'.split()
vals = k2lc, binsize, geom, nsteps1, nsteps2, maxsteps, grthreshold, nthreads, bin_k2, radius
for k,v in zip(args, vals):
    if v is not None:
        setup['config'][k] = v

fit = kanpai.spz.Fit(setup, outdir, method)
fit.run_map(make_plots=True)
fit.run_mcmc(save, restart, resume)
fit.plot_final(percs, plot_binned)
fit.dump()
